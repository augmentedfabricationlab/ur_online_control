'''
Created on 22.11.2016

@author: rustr
'''
from __future__ import print_function
import time
import sys
import os

# set the paths to find library
file_dir = os.path.dirname( __file__)
parent_dir = os.path.abspath(os.path.join(file_dir, "..", ".."))
sys.path.append(file_dir)
sys.path.append(parent_dir)

import ur_online_control.communication.container as container
from ur_online_control.communication.server import Server
from ur_online_control.communication.client_wrapper import ClientWrapper
from ur_online_control.communication.formatting import format_commands

if len(sys.argv) > 1:
    server_address = sys.argv[1]
    server_port = int(sys.argv[2])
    ur_ip = sys.argv[3]
    print(sys.argv)
else:
    #server_address = "192.168.10.12"
    server_address = "127.0.0.1"
    server_port = 30003
    #ur_ip = "192.168.10.11"
    ur_ip = "127.0.0.1"


def main():

    # start the server
    server = Server(server_address, server_port)
    server.start()
    server.client_ips.update({"UR": ur_ip})

    # create client wrappers, that wrap the underlying communication to the sockets
    #gh = ClientWrapper("GH")
    ur = ClientWrapper("UR")

    # wait for the clients to be connected
    #gh.wait_for_connected()
    ur.wait_for_connected()

    # now enter fabrication loop
    while True: # and ur and gh connected
        # let gh control if we should continue
        #continue_fabrication = gh.wait_for_int()
        continue_fabrication = 1
        print(continue_fabrication)
        if not continue_fabrication:
            break
        #msg_float_list = gh.wait_for_float_list()
        
        msg_float_list = [-533.101125784542, -17.825735169775591, 273.89344063873864, 0.0, 0.0, 1.5639937106400874, 30.0, 0.0, -532.66597594273992, 9.584097692823434, 274.13841146400523, 0.014151609857749246, -0.014518396954698956, 1.5451639473042031, 30.0, 9.594907635726743, -531.65772881947782, 36.96826873172526, 274.92530815263888, 0.030187346061128054, -0.031701172735487664, 1.5216686047894792, 30.0, 9.594699823043333, -529.92978958704578, 64.2901236780105, 276.34886237501706, 0.04847985055474005, -0.052454030884722232, 1.491521365155376, 30.0, 9.594315414475556, -527.271549690888, 91.485669041986156, 278.53332927625581, 0.069408401030624914, -0.078135054924585334, 1.4514515329131878, 30.0, 9.59356549400481, -523.36684499228136, 118.43733666426263, 281.64447888089387, 0.09314818467387713, -0.11082003080191591, 1.3957329210144558, 30.0, 9.591901136284024, -517.71676158275193, 144.91363805904587, 285.90355331632048, 0.11889244924811646, -0.15359882734593508, 1.3136267853962957, 30.0, 9.587744375470553, -509.49593495792334, 170.41911077456172, 291.5864879755519, 0.14209112842457711, -0.21000464044474804, 1.1837638377751014, 30.0, 9.576389130593492, -497.33577505834819, 193.80971675434904, 298.91045562567115, 0.14606763716880952, -0.27625413786704933, 0.96519115183880333, 30.0, 9.550461724385764, -479.42909411141767, 212.56718065438011, 307.40106942198844, 0.097378356648249953, -0.30244335336029265, 0.6178325082808368, 30.0, 9.53443535809669, -455.46681380298713, 223.44136649493396, 314.44710184243536, 0.022377713183994438, -0.1793259075585576, 0.24761838271742395, 30.0, 9.53443535809669, -428.45568140640432, 227.025268094657, 316.10278489677643, -0.0018027596968626929, 0.070117073270452066, 0.051389017202598211, 30.0, 9.554339146368797, -401.64775123295072, 227.62459766666387, 310.726458118454, -6.2437734026923688e-05, 0.30501511636779538, 0.0004062284593271473, 30.0, 9.571903034617735, -376.14729891717121, 227.27671938439534, 300.71590493030891, 0.0053357088495833973, 0.42855132100890631, -0.024517552591211449, 30.0, 9.589011663660093, -351.60756453122224, 226.51506822976941, 288.52528287101228, 0.0084971191966189703, 0.48445136908439512, -0.034386879539136855, 30.0, 9.59402251117031, -327.4815158254741, 225.66223140285206, 275.53347353353968, 0.0084147203117754879, 0.49661173104950757, -0.033185836042383211, 30.0, 9.595047342261752, -303.27642971248946, 224.95511968018425, 262.681848078848, 0.005443117695696836, 0.47343434570890963, -0.022562035571446117, 30.0, 9.593765642421957, -278.56178782518577, 224.61845949042691, 250.83183356121654, 0.00057346763296982209, 0.41419884843925125, -0.0027293412995539495, 30.0, 9.590774395093403, -252.98530060897551, 224.91260740824347, 241.00136908984285, -0.0042491363482519036, 0.31145143748380266, 0.027063392117663773, 30.0, 9.584762526863608, -226.399831650318, 226.15978887878774, 234.5517517442735, -0.0052424772785800841, 0.15397908585152509, 0.067932410819783934, 30.0, 9.578649919113552, -199.20020425239935, 228.76304875577426, 233.00667547570083, 0.002573381280494059, -0.040019151055415078, 0.12841346787563149, 30.0, 9.578649919113552, -172.47346051831047, 233.45520101027222, 236.57159381752206, 0.024505954121567895, -0.21615980506076427, 0.22488640221722109, 30.0, 9.579032381111649, -147.3644569770108, 240.92327805128335, 244.50659825588721, 0.065531851742793398, -0.361188182203042, 0.35494918792573893, 30.0, 9.580021910107153, -124.76156312068746, 251.48357299952258, 255.77838949223482, 0.12380777846527384, -0.46529445701910821, 0.51016526836416687, 30.0, 9.581718526671201, -105.18352158125458, 265.05729444842228, 269.27973353990473, 0.18993872742689905, -0.52511535405352638, 0.67642942279474361, 30.0, 9.584070620526527, -88.767304405064579, 281.28075299988143, 284.02894159367816, 0.25169413255144352, -0.54635848614718152, 0.83814464457548954, 30.0, 9.586626709386875, -75.361170482681, 299.67115451116109, 299.28213148400471, 0.30060848954010866, -0.54063571648503972, 0.98396024482770883, 30.0, 9.588921174947775, -64.657931738118734, 319.7564878350301, 314.54298807238831, 0.33434114801651732, -0.51965853197172474, 1.1090951747555098, 30.0, 9.590726019193804, -56.30288723611136, 341.13809390004479, 329.51294581503458, 0.35467473861055115, -0.49189391311410086, 1.2137472572322638, 30.0, 9.592040266148278, -49.95589583373004, 363.50366026834149, 344.02918235827724, 0.36479305525965217, -0.46232876658490163, 1.3004803863613432, 30.0, 0.0]
        print("len(msg_float_list) %i" % len(msg_float_list))
        # we know this are commands, so we format them accordingly
        commands = format_commands(msg_float_list)
        print("len(commands) %i" % len(commands))
        for cmd in commands:
            x, y, z, ax, ay, az, speed, radius = cmd
            ur.send_command_movel([x, y, z, ax, ay, az], v=speed, r=radius)
        ur.wait_for_ready()
        #gh.send_float_list(commands[0])
        print("============================================================")
        """
        ur.wait_for_ready()
        # wait for sensor value
        digital_in = ur.wait_for_digital_in(number)
        current_pose_joint = ur.wait_for_current_pose_joint()
        current_pose_cartesian = ur.get_current_pose_cartesian()
        # send further to gh
        gh.send_float_list(digital_in)
        gh.send_float_list(current_pose_joint)
        gh.send_float_list(current_pose_cartesian)
        """

    server.close()

    print("Please press a key to terminate the program.")
    junk = sys.stdin.readline()
    print("Done.")

if __name__ == "__main__":
    main()
